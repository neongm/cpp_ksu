for - цикл с заранее известным числом повторений

общий вид:
for(<инициализация>;<выражение условия>;<список выражений>) 
    <тело цикла>

 Первая секция выполняется при первом обращении к циклу.
Она представляет собой последовательность определений, раделенных запятыми. 
 Выражение условия - условие, определяемое выполнимость тела цикла (если истина - тело цикла выполняется).
Список выражений - последовательность операторов, выполняемая после завершения очередной итерации цикла.
    примечание: каждая из секций не является обязательной и может отсутствовать. Наличие ';' - обязательно

for(;1;) - бескнечный цикл

примером использования такого цикла может быть определение факториала заданного числа N: 
<code>
int p = 1;
for(int i=0; i<N; i++){
    p=p*(++i)
}
</code>
достаточно часто конструкции составляюшие тело цикла помещаются в заголовок и тело цикла в этом случае будет пустым. 
В качестве примера перепишем последний пример нахождения факториала:
<code>                    // интересное 
for(int i=0, int p=1; i<N; i++, p*=i); 
</code>


    операторы передачи управления 
к ним относятся: 
а) goto - оператор безусловного перехода
б) break - оператор выхода из цикла или переключателя
в) continue - оператор перехода к следующей итерации цикла
г) return - оператор выхода из функции

оператор безвусловного перехода имееет слудующий вид: 
goto <метка>;
<code>
goto abc;
abc: 
    x++
</code>
при её использовании имеются важные ограничения: запрещено перескакивать через блоки, содержащие определение переменных; (сам дурак)
современные принципы создания программ советуют либо совсем отказаться от этого оператора, либо свести его применение к минимуму и 
придерживаться следующих рекомендаций:
a) не входить внутрь блока извне
б) не входить внутрь условного оператора 
в) не передавать управление внутрь переключателя 
г) не передавать управлеине внутрь цикла

пример использования:
в рамках текста одной программы требуется переходить к одному участку, из разных мест:

return - оператор возврата из функции 
общий вид:
return <выражение>;
примечание: если выражение присутствует, то оно должно быть только скалярным (строку вернуть нельзя, а указатель на строку можно)
пример:
составить программу, возведения чила в куб с использованием функции

<code>                // программа просматривается сверх-вниз, писать функции выше
#include <iostream>

float cube(float);    // прототип функции cube - чтобы не ругался оператор 

int main(){
    float n;
    std::cout<<"задайте число"<<std::endl;
    std::cin>>n;
    std::cout<<"его куб = "<<cube(n)<<std::endl;
}

float cube(float z){
    return z*z*z;
}
</code>

    МАССИВЫ
 Определение одномерного массива выглядит так:
<тип данных> <имя массива>[<колличество элементов>];
int a[10]; 
//нумерация элементов с 0
a[0] - первый элемент, а[9] - последний

при определении массива может выполняться его инициализациия:
a) char ch[] = {'a', 'b', 'c', 'd'}; // массив из 4х элементов с соответствующими значениями 
б) int p[6] = {10, 20, 30, 40}; // массив из 6 элементов, первые 4 из которых заданы
в) char s[] = "ABCD"; // массив s и 5 элементов, включая '\0' в конце
г) float a[]; // ошибка, т.к. неизвестно кол-во элементов массива 
д) double b[4] = {1,2,3,4,5,6} // ошибка, т.к. непонятна размероность массива

имя массива является указателем-константой, значением которого служит адрес первого элемента массива
a[0] эквиваленто *a

в обещем случае доступ к заданному элементу массива может быть осуществлен 2-я способами:
а) <имя массива>[номер элемента]
б) *(<имя массива>+[<номер элемента>])

пример(очень эффектный):
вывысти на экран заданную строку несколькими способами:
<code>
#include <iostream>
int main(){
    char x[]="пример строки";
    int i=0;
    std::cout<<"вывод первого симвода строки, первый способ: "<<x[0]<<'\n';
    std::cout<<"вывод первого симвода строки, второй способ: "<<*x<<'\n';
    std::cout<<"вывод строки без цикла, первый способ: "<<x<<'\n';
    std::cout<<"вывод строки без цикла, второй способ: "<<&x[0]<<'\n';  // адрес указателя
    std::cout<<"вывод строки с циклом, первый способ: "<<'\n';
    while(x[i]!='\0') std::cout<<x[i++];
    std::cout<<"\nвывод строки с циклом, второй способ: "<<'\n';
    i=0;
    while(*(x+i)!='\0') std::cout<<*(x+i++);
    std::cout<<"\nвывод строки с циклом, треий способ: "<<'\n';
    i=0;
    while(x[i]!='\0') std::cout<<i++[x];
}
</code>
